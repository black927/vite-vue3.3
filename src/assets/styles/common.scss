// 数组用()表示，用$定义变量
$breakpoints: (
  'screen1': (
    300px,
    600px,
  ),
  'screen2': (
    600px,
    700px,
  ),
  'screen3': (
    700px,
    800px,
  ),
  'screen4': (
    800px,
    900px,
  ),
  'screen5': (
    900px,
    1000px,
  ),
  'screen6': (
    1000px,
    1100px,
  ),
  'screen7': (
    1100px,
    1200px,
  ),
  'tv': 1200px,
);
// 混合
@mixin respond-to($breakname) {
  $bp: map-get($breakpoints, $breakname); // 取出对应的值
  // 如果是数组
  @if type-of($bp) == 'list' {
    $min: nth($bp, 1); // 取出数组第一项
    $max: nth($bp, 2); // 取出数组第二项
    @media (min-width: $min) and (max-width: $max) {
      @content; // 相当于插槽
    }
  } @else {
    @media (min-width: $bp) {
      @content;
    }
  }
}

.header {
  width: 100%;
  @include respond-to('screen1') {
    background-color: red;
    font-size: 26px;
  }
  @include respond-to('screen2') {
    background-color: yellow;
    font-size: 24px;
  }
  @include respond-to('screen3') {
    background-color: blue;
    font-size: 22px;
  }
  @include respond-to('screen4') {
    background-color: green;
    font-size: 20px;
  }
  @include respond-to('screen5') {
    background-color: cyan;
    font-size: 18px;
  }
  @include respond-to('screen6') {
    background-color: indigo;
    font-size: 16px;
  }
  @include respond-to('screen7') {
    background-color: purple;
    font-size: 14px;
  }
  @include respond-to('tv') {
    background-color: black;
    font-size: 12px;
  }
}

.btn {
  background-color: $color-primary;
}

.app-container {
  background-color: #fff;
  height: 100%;
  padding: 15px;
  border-radius: 8px;
}

// markdown文件样式
.markdown-preview {
  font-size: 14px;
  --table-border: #e5e6eb;
  --table-header-bg-color: #f0f1f5;
  --table-row-hover-bg-color: #f5f7fa;
  ul,
  li {
    list-style: revert;
  }
  ul {
    padding-inline-start: revert;
  }
  hr {
    border: none;
    height: 2px;
    background-color: var(--table-border);
    margin: 30px 0;
  }
  table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    display: table;
    text-indent: initial;
    unicode-bidi: isolate;
    border: 1px solid var(--table-border);
    border-radius: 10px;
    overflow: hidden;
  }
  thead {
    color: #1d2129;
  }
  th,
  td {
    padding: 10px 12px;
    text-align: left;
    border-bottom: 1px solid var(--table-border);
    border-right: 1px solid var(--table-border);
  }
  th:last-child,
  td:last-child {
    border-right: none;
  }
  tr:last-child td {
    border-bottom: none;
  }
  th {
    background-color: var(--table-header-bg-color);
    user-select: none;
    font-weight: 600;
  }
  td {
    transition: background-color 0.25s ease;
  }
  tr {
    background-color: #fff;
  }
  tr:hover > td {
    background-color: var(--table-row-hover-bg-color);
  }
  a {
    color: rgb(30, 68, 255);
    cursor: pointer;
  }
  a:hover {
    color: rgba(30, 68, 255, 0.6);
    text-decoration: underline;
  }
}

.markdown-body {
  ul,
  li {
    list-style: revert;
  }
  ul {
    padding-inline-start: revert;
  }
}
