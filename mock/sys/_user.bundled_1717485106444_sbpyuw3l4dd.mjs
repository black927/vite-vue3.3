// mock/_util.ts
function responseResult({
  code = 200,
  data,
  msg = "\u8BF7\u6C42\u6210\u529F"
}) {
  return {
    code,
    data,
    msg,
    traceId: Date.now().toString()
  };
}

// mock/sys/user.ts
var userList = (() => {
  const result = [];
  for (let index = 0; index < 10; index++) {
    result.push({
      id: `${index}`,
      userName: "@first",
      email: "@email",
      // createUser: '@cname()',
      createUser: "@first",
      role: "@first",
      createTime: "@datetime",
      updateTime: "@datetime",
      remark: "@cword(10,20)",
      "status|1": ["1", "2", "3"],
      failReason: "@cword(5,20)"
    });
  }
  return result;
})();
var user_default = [
  {
    url: "/user/login",
    timeout: 1e3,
    method: "get",
    response: () => {
      const res = {
        userName: "liyang",
        phoneNumber: "18228329236"
      };
      return responseResult({ data: res });
    }
  },
  {
    url: "/user/list",
    timeout: 1e3,
    method: "post",
    statusCode: 200,
    response: ({ body }) => {
      const { pageNo = 1, pageSize = 10 } = body;
      return responseResult({ data: { totalNumber: 100, pageNo, pageSize, list: userList } });
    }
  },
  {
    url: "/user/add",
    timeout: 1e3,
    method: "post",
    async rawResponse(req, res) {
      try {
        await new Promise((resolve, reject) => {
          req.on("data", (chunk) => {
            const reqData = JSON.parse(chunk.toString());
            if (reqData.userName.length > 10) {
              reject(responseResult({ code: 500, msg: "\u7528\u6237\u540D\u79F0\u4E0D\u80FD\u5927\u4E8E20\u4E2A\u5B57\u7B26" }));
              return;
            }
          });
          req.on("end", () => resolve(void 0));
        });
        res.setHeader("Content-Type", "application/json;charset=utf-8");
        res.end(JSON.stringify(responseResult({ msg: "\u521B\u5EFA\u6210\u529F" })));
      } catch (e) {
        console.log("error>>>", e);
        res.end(JSON.stringify(e));
      }
    }
  },
  {
    url: "/user/edit",
    timeout: 1e3,
    method: "post",
    async rawResponse(req, res) {
      try {
        await new Promise((resolve, reject) => {
          req.on("data", (chunk) => {
            const reqData = JSON.parse(chunk.toString());
            if (reqData.userName.length > 10) {
              reject(responseResult({ code: 500, msg: "\u7528\u6237\u540D\u79F0\u4E0D\u80FD\u5927\u4E8E20\u4E2A\u5B57\u7B26" }));
              return;
            }
          });
          req.on("end", () => resolve(void 0));
        });
        res.setHeader("Content-Type", "application/json;charset=utf-8");
        res.end(JSON.stringify(responseResult({ msg: "\u4FEE\u6539\u6210\u529F" })));
      } catch (e) {
        console.log("error>>>", e);
        res.end(JSON.stringify(e));
      }
    }
  }
];
export {
  user_default as default
};
//# sourceMappingURL=data:application/json;base64,
