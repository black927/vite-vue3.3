// mock/_util.ts
function resultSuccess(data, { msg = "\u8BF7\u6C42\u6210\u529F" } = {}) {
  return {
    code: 200,
    data,
    msg,
    traceId: Date.now().toString()
  };
}
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// mock/sys/tools/upload.ts
var uploadList = (() => {
  const result = [];
  for (let index = 0; index < 10; index++) {
    result.push({
      id: `${index}`,
      classification: "@first",
      tableName: "@first",
      tableNa: "@first",
      "tableType|1": ["1", "2", "3"],
      createTime: "@datetime",
      updateTime: "@datetime",
      "dataSource|1": ["1", "2", "3", "4"],
      tableCode: `CREATE TABLE data_example (
      data_example_name varchar(32) DEFAULT NULL COMMENT '\u6837\u4F8B\u5B57\u6BB5\u540D\u79F0',
      data_example_type varchar(32) DEFAULT NULL COMMENT '\u6837\u4F8B\u7C7B\u578B',
      create_person varchar(32) DEFAULT NULL COMMENT '\u521B\u5EFA\u4EBA',
      update_person varchar(32) DEFAULT NULL COMMENT '\u66F4\u65B0\u4EBA'
    ) ENGINE=InnoDB COMMENT='\u6837\u4F8B\u8868';`
    });
  }
  return result;
})();
var recordList = (() => {
  const result = [];
  for (let index = 0; index < 10; index++) {
    result.push({
      id: `${index}`,
      fileName: "@first",
      fileVersion: "v1.0.0",
      fileSize: "128KB",
      fileRow: "305",
      status: getRandomInt(1, 5).toString(),
      operator: "@cname()",
      createTime: "@datetime",
      updateTime: "@datetime"
    });
  }
  return result;
})();
var upload_default = [
  {
    url: "/upload/list",
    timeout: 1e3,
    method: "post",
    response: ({ body }) => {
      const { pageNo = 1, pageSize = 10 } = body;
      return resultSuccess({ totalNumber: 70, pageNo, pageSize, list: uploadList });
    }
  },
  {
    url: "/upload/add",
    timeout: 1e3,
    method: "post",
    response: () => {
      return resultSuccess(null, { msg: "\u521B\u5EFA\u6210\u529F" });
    }
  },
  {
    url: "/upload/edit",
    timeout: 1e3,
    method: "post",
    response: () => {
      return resultSuccess(null, { msg: "\u4FEE\u6539\u6210\u529F" });
    }
  },
  {
    url: "/upload/delete",
    timeout: 100,
    method: "post",
    response: () => {
      return resultSuccess(null, { msg: "\u5220\u9664\u6210\u529F" });
    }
  },
  {
    url: "/upload/file",
    timeout: 1e3,
    method: "post",
    response: () => {
      return resultSuccess(null, { msg: "\u4E0A\u4F20\u6210\u529F" });
    }
  },
  {
    url: "/upload/record",
    timeout: 100,
    method: "post",
    response: ({ body }) => {
      const { pageNo = 1, pageSize = 10, type } = body;
      let resData = recordList;
      if (type === "1") {
        resData = resData.filter((v) => ["1", "2", "3"].includes(v.status));
      } else if (type === "2") {
        resData = resData.filter((v) => ["4", "5"].includes(v.status));
      }
      return resultSuccess({ totalNumber: 30, pageNo, pageSize, list: resData });
    }
  },
  {
    url: "/upload/datasource",
    timeout: 100,
    method: "post",
    response: () => {
      return resultSuccess([
        { label: "\u6587\u4EF6\u4E0A\u4F20\u6570\u636E\u6E90\u3010\u7EDF\u4E00\u6E90\u3011", value: "1" },
        { label: "\u6587\u4EF6\u4E0A\u4F20\u6570\u636E\u6E90\u30101\u3011", value: "2" },
        { label: "\u6587\u4EF6\u4E0A\u4F20\u6570\u636E\u6E90\u30102\u3011", value: "3" },
        { label: "\u6587\u4EF6\u4E0A\u4F20\u6570\u636E\u6E90\u30103\u3011", value: "4" }
      ]);
    }
  }
];
export {
  upload_default as default
};
//# sourceMappingURL=data:application/json;base64,
